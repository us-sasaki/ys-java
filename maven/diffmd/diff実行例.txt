[変更前(9)行目]
Using the Cumulocity real-time event processing, you can add your own logic to your IoT solution. This includes, but is
not limited to, data analytics logic. To define new analytics, you will use the Cumulocity Event Language. The language
allows to analyze incoming data using a powerful pattern and time window based query language. It also allows you to cre
ate, update and delete your data in real-time.
　↓
[変更後(9)行目]
Using the Cumulocity real-time event processing, you can add your own logic to your IoT solution. This includes data ana
lytics logic but it is not limited to it. To define new analytics, you will use the Cumulocity Event Language. The langu
age allows to analyze incoming data. It is using a powerful pattern and time window based query language. You can create
, update and delete your data in real-time.

[変更前(11)行目]
　↓
[変更後(11)行目]


[変更前(12)行目]
* Remote control: Turn a device off if it's temperature goes over 40 degrees.
　↓
[変更後(13)行目]

* Remote control: Turn a device off if it's temperature rises over 40 degrees.

[変更前(23)行目]
In the Cumulocity Event Language data flows through streams. You can create events in streams and listen for events crea
ted in streams.
　↓
[変更後(25)行目]
In the Cumulocity Event Language data flows in streams. You can create events in streams and listen to events created in
 streams.

[変更前(27)行目]
There are some predefined streams to interact with several Cumulocity APIs. For each input stream Cumulocity will automa
tically create a new event when the respective API call was made e.g. if a measurement was created via REST API there wi
ll be a new event in the MeasurementCreated stream.
For interacting with the Cumulocity backend you can create an event on the respective output stream and Cumulocity will
automatically execute either the database query or create the API calls necessary for sending mails, sms, etc. e.g. to c
reate a new alarm in the database you can create a new event in the CreateAlarm stream.
　↓
[変更後(29)行目]
There are some predefined streams to interact with several Cumulocity APIs. For each input stream Cumulocity will automa
tically create a new event when the respective API call was made. If a measurement was created via REST API there will b
e a new event in the MeasurementCreated stream.
For interacting with the Cumulocity backend you can create an event on the respective output stream and Cumulocity will
automatically execute either the database query or create the API calls necessary for sending mails, sms, or similar. To
 create a new alarm in the database you can create a new event in the CreateAlarm stream.

[変更前(33)行目]
|Events|EventCreated<br/>EventDeleted|CreateEvent<br/>DeleteEvent|This group of events represents creation or deletion o
f a single Event.|
　↓
[変更後(35)行目]
|Events|EventCreated<br/>EventUpdated<br/>EventDeleted|CreateEvent<br/>UpdateEvent<br/>DeleteEvent|This group of events
represents creation or deletion of a single Event.|

[変更前(41)行目]
Please check out the data model to see how the events on each stream are structured.
　↓
[変更後(43)行目]
Look at the data model to see how the events for each stream are structured.

[変更前(45)行目]
Creating an event is done by the keywords `insert into` and `select`. First you need to specify with the "insert into" f
ollowed by the stream name for which stream you want to create an event. After that you can use the "select" clause to s
pecify the parameters of the event.
　↓
[変更後(47)行目]
Creating an event is done by the keywords `insert into` and `select`. First you need to specify the "insert into" follow
ed by the stream name for which stream you want to create an event. After that you can use the "select" clause to specif
y the parameters of the event.

[変更前(58)行目]
As an example we now want to create a statement that combines the learnings from the sections on this page. It should li
sten to a stream and create a new event in another stream whenever the condition applies.
　↓
[変更後(60)行目]
As an example we create a statement. It should listen to a stream and create a new event in another stream whenever the
specified condition applies.

[変更前(61)行目]
1. To create an alarm we need to `insert into` the stream `CreateAlarm`
2. We need to specify all parameters for the event in the `select` clause
3. We want the alarm to be created when an event `from` the stream `MeasurementCreated` is received
4. We want the alarm only be created under certain conditions of the event from the `MeasurementCreated` stream which we
 specific in the `where` clause
　↓
[変更後(63)行目]
1. To create an alarm we need to `insert into` the stream `CreateAlarm`.
2. We need to specify all parameters for the event in the `select` clause.
3. We want the alarm to be created when an event `from` the stream `MeasurementCreated` is received.
4. We want the alarm only be created under certain conditions of the event from the `MeasurementCreated` stream which we
 specific in the `where` clause.
 