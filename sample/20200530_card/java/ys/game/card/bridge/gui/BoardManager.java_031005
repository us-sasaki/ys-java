package ys.game.card.bridge.gui;

import java.awt.*;
import java.awt.event.*;
import java.util.Vector;

import ys.game.card.*;
import ys.game.card.gui.*;
import ys.game.card.bridge.*;
import ys.game.card.bridge.gui.*;

/**
 * PlayMain を整理して Board を進めるオブジェクトを作成することとする。
 * このオブジェクトはアプレットで使用されることを前提とする。
 * 将来的な GUI オプション、プレイ内容制御機能を提供させたい。
 *
 * 基本的な考え方は、上位で Board を与え、その Board を終了させる役割を持つ。
 * 与えられた board の reset は上位で行う。(途中から実行させたいため)
 * また、Player も上位で設定する。
 *
 * 進行は自動的に行われる。その中でイベントが発生し、補足するオブジェクトを
 * 登録するための addBridgeEventListener() を提供する。
 * 進行制御に対しては、interrupt() を行う中断、undo() などを提供する予定。
 *
 * GUI オプション、プレイ内容制御機能としては、次を含められるようにしたい
 * ・プレイナビゲーション(解説。あるイベントですみれが説明する。)
 * ●中断
 * ●ダブルダミーモード
 * ・視点の設定
 * ・部分的オープンモード
 * ・カードの裏の模様設定
 * ・点滅時間など、wait の設定
 * ・Undo
 * ・これらの機能の有効化、無効化
 */
public class BoardManager implements MouseListener, ActionListener {
	/**
	 * 各種オプション項目を保存するオブジェクト
	 */
	protected BoardManagerConfig config;
	
	/**
	 * 親 Container で、表示される場所である。
	 */
	protected Container		display;
	
	/**
	 * 表示エリアに貼り付けられる BridgeField である
	 */
	protected BridgeField	field;
	
	/**
	 * 進行対象となるボード
	 */
	protected GuiedBoard	board;
	
	/**
	 * プレイヤーアルゴリズム
	 */
	protected Player[]		player;
	
	protected Explanation	sumire;
	protected Button		quit;
	protected Button		dd;
	protected Thread		mainThread;
	protected YesNoDialog	confirmDialog;
	
/*-------------
 * Constructor
 */
	public BoardManager() {
		player = new Player[4];
	}
	
/*----------------------------
 * implements (MouseListener)
 */
	/**
	 * マウスがクリックされた場合、このオブジェクトの wait() を開放します。
	 */
	public void mouseClicked(MouseEvent me) {
		synchronized (this) {
			notifyAll();
		}
	}
	
	public void mousePressed(MouseEvent me) { }
	public void mouseReleased(MouseEvent me) { }
	public void mouseEntered(MouseEvent me) { }
	public void mouseExited(MouseEvent me) { }
	
/*-----------------------------
 * implements (ActionListener)
 */
	public void actionPerformed(ActionEvent e) {
	}
	
/*--------------
 * 設定メソッド
 */
	/**
	 * 各種ＧＵＩリソースの初期化を行います。
	 * init と destroy は対となるメソッドで、init では各種リソースの生成、
	 * destroy では各種リソースの破棄を行います。
	 *
	 * @param		display		親Containerを指定。peered component である必要がある。
	 * @param		board		進行対象のボードを設定する
	 */
	public void init(Container display, BoardManagerConfig config) {
		this.display	= display;
		this.config		= config;
		
		// 画面の大枠である BridgeField を設定する。
		field	= new BridgeField(display);
		
		//
		// レイアウト設定
		//
		display.setLayout(null);
		
		// BridgeField を親 Container に追加する
		display.add(field.getCanvas());
		field.getCanvas().requestFocus();
	}
	
	/**
	 * init()と対になるメソッドで、init()で初期化したリソースの破棄を行います。
	 * また、いつでも呼ばれる可能性があるため、本クラスで使用するすべてのリソースの
	 * 破棄も行います。
	 * 上位から明示的にコールすることによってダイアログが残るバグは解消されます。
	 */
	public void destroy() {
		if (field != null)
			field.removeEntity(board);
		if (confirmDialog != null) confirmDialog.disposeDialog();
		if (player != null) {
			for (int i = 0; i < player.length; i++) {
				if ((player[i] != null)&&(player[i] instanceof HumanPlayer)) {
					((HumanPlayer)player[i]).dispose();
				}
			}
		}
	}
	
	/**
	 * この BoardManager GUI を利用する HumanPlayer のインスタンスを作成します。
	 * init() されていないか、 destroy() 後でこのメソッドを呼ぶと、field が存在
	 * しないため null が返却されます。
	 */
	public HumanPlayer getHumanPlayerInstance(int seat) {
		if (field == null) return null;
		return new HumanPlayer(board, field, seat);
	}
	
	/**
	 * プレイヤーを設定します。
	 * 設定されたプレイヤーインスタンスの setBoard(), setMySeat() が自動的に呼ばれます。
	 */
	public void setPlayer(Player p, int seat) {
		p.setMySeat(seat);
		
		player[seat] = p;
	}
	
/*------------
 * ボード進行
 */
	/**
	 * init() で指定された設定を用いて、board を進行させます。
	 */
	public void start(Board b) {
		if (field == null) throw new IllegalStatusException("start() 前に init() してください");
		if (board instanceof GuiedBoard)
			this.board = (GuiedBoard)b;
		else
			this.board = new GuiedBoard(b);
		for (int i = 0; i < 4; i++) {
			if (player[i] == null)
				throw new IllegalStatusException("start() 前に player を設定してください: "+i);
			player[i].setBoard(board);
		}
		board.setName(config.getTitle());
		
		field.addEntity(board);
		board.setPosition(0, 0);
		board.setDirection(0);
		
		mainThread = Thread.currentThread();
		Thread.interrupted(); // interruptステータスクリア
		
		try {
			onStarting();	//			explain();
			mainLoop();
			onFinished();	//			displayScore();
		} catch (InterruptedBridgeException e) {
			// 中断ボタンが押され、終了が選択された場合
			field.removeSpot();
			field.repaint();
			onClosed();
		}
		mainThread = null;
		field.removeEntity(board);
		
	}
	
	/**
	 * すみれによる説明を表示します。はじめの説明のほか、ゲーム中にコールすることもできます。
	 * 中断ボタンを検知し、中断が選択されると InterruptedBridgeException がスローされます。
	 *
	 * @param		description		すみれのセリフ
	 * @exception	InterruptedBridgeException		interrupt() がコールされた
	 */
	public void explain(String description) throws InterruptedBridgeException {
		
		sumire = new Explanation(field, description);
		
		field.addEntity(sumire);
		field.repaint();
		try {
			waitClick(); // interrupt() コールによる InterruptedException スローするかも
		} catch (InterruptedException e) {
			if (confirmQuit()) {
				field.removeEntity(sumire);
				throw new InterruptedBridgeException();
			}
		}
		field.removeEntity(sumire); // これによってすみれのスレッドも終了する
		field.repaint();
	}
	
	/**
	 * メインループ
	 */
	protected void mainLoop() throws InterruptedBridgeException {
		if ( (config.doubleDummyIsAvailable())&&(config.doubleDummy()) ) {
			board.getHand(Board.EAST).turn(true);
			board.getHand(Board.WEST).turn(true);
		}
		
		while (true) {
			//
			// Spot を指定する
			//
			field.setSpot(board.getTurn());
			field.repaint();
			
			Object c = null;
			while (c == null) {
				try {
					c = player[board.getPlayer()].play(); // ブロックする
				} catch (InterruptedException e) {
					if (confirmQuit()) throw new InterruptedBridgeException();
				}
			}
			board.play(c);
			field.repaint();
			played();
			
			if (board.getStatus() == Board.SCORING) break;
		}
	}
	
	/**
	 * 毎回の play 後に呼ばれます
	 */
	protected void played() {
	}
	
	/**
	 * config の内容を変更したときなど、再描画を行わせます。
	 */
	public void repaint() {
		if (field != null) field.repaint();
	}
	
	/**
	 * 中断ボタンが押されたときに表示する、中断確認ダイアログ表示処理
	 */
	protected boolean confirmQuit() {
		try {
			confirmDialog = new YesNoDialog(
								field.getCanvas(),
								"このボードを破棄して中断しますか？");
			confirmDialog.show();
			boolean yes = confirmDialog.isYes();
			confirmDialog.disposeDialog();
			confirmDialog = null;
			return yes;
		} catch (Exception e) {
			// ブラウザの強制終了の場合
			return true;
		}
	}
	
	/**
	 * クリックされるのを待ちます。
	 * interrupt() メソッドがコールされた場合、InterruptedException がスローされます。
	 */
	protected void waitClick() throws InterruptedException {
		synchronized (this) {
			Canvas canvas = field.getCanvas();
			canvas.addMouseListener(this);
			try {
				wait();
				canvas.removeMouseListener(this);
			} catch (InterruptedException e) {
				canvas.removeMouseListener(this);
				throw new InterruptedException();
			}
		}
	}
	
	/**
	 * 中断します。
	 */
	public void interrupt() {
		mainThread.interrupt();
	}
}
