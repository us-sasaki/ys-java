package ys.game.card.bridge.gui;

/*
 * 2001/ 7/15  終了時にダイアログが表示されたままになるバグをFIX。
 * 2001/ 7/23  private メソッド、変数を protected 化(PracticeModePlayMainのため)
 */

import java.awt.*;
import java.awt.event.*;
import java.util.Vector;

import ys.game.card.*;
import ys.game.card.gui.*;
import ys.game.card.bridge.*;
import ys.game.card.bridge.ta.ReadAheadPlayer;

/**
 * アドホックなメインプログラムです。だんだん本格的になってきました。
 *
 * @version		a-release		23, July 2001
 * @author		Yusuke Sasaki
 */
public class PlayMain implements MouseListener, ActionListener {
	protected Container	display;
	protected BridgeField	field;
	protected GuiedBoard	board;
	protected Player[]	player;
	protected int			handno;
	protected String		contractString;
	
	protected Vector		problem;
	protected Explanation	sumire;
	
	protected Button		quit;
	protected Button		dd;			// added 02/9/16
	protected boolean		doubleDummy = false; // added 02/9/16
	
	protected Thread		mainThread;
	
	protected SelectDialog	dialog;
	protected YesNoDialog	confirmDialog;
	
	/** Select Dialog の X ボタンを押したときに true になります */
	public boolean			exitSignal = false;
	
/*-------------
 * Constructor
 */
	/**
	 * PlayMain オブジェクトを生成します。
	 */
	public PlayMain(Container display) {
		this.display	= display;
		problem = new Vector();
	}
	
/*----------------------------
 * implements (MouseListener)
 */
	/**
	 * マウスがクリックされた場合、このオブジェクトの wait() を開放します。
	 */
	public void mouseClicked(MouseEvent me) {
		synchronized (this) {
			notifyAll();
		}
	}
	
	public void mousePressed(MouseEvent me) { }
	public void mouseReleased(MouseEvent me) { }
	public void mouseEntered(MouseEvent me) { }
	public void mouseExited(MouseEvent me) { }
	
/*-----------------------------
 * implements (ActionListener)
 */
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == quit) {
			if (mainThread != null) mainThread.interrupt();
		}
		
		// 以下、added 02/9/16
		if (e.getSource() == dd) {
			doubleDummy = !doubleDummy;
			if (!doubleDummy) {
				dd.setLabel("ダブルダミー");
				if (board.getStatus() == Board.PLAYING) {
					board.getHand(Board.EAST).turn(false);
					board.getHand(Board.WEST).turn(false);
					field.repaint();
				}
			} else {
				dd.setLabel("通常に戻す");
				if (board.getStatus() == Board.PLAYING) {
					board.getHand(Board.EAST).turn(true);
					board.getHand(Board.WEST).turn(true);
					field.repaint();
				}
			}
		}
		// 以上、added 02/9/16
	}
	
/*------------------
 * instance methods
 */
	/**
	 * はじめに表示されるダイアログに問題を追加します。
	 * valid でない問題は追加されません。
	 */
	public void addProblem(Problem p) {
		if (p.isValid()) problem.addElement(p);
	}
	
	/**
	 * BridgeField, Board を初期化します。
	 *
	 * @param		display		GUIリソースと接続されている Container(AppletまたはFrame)
	 */
	public void initialize() {
		field = new BridgeField(display); // この中で display.createImage() を行うためpeerが必要
		Canvas canvas = field.getCanvas();
		
		display.setLayout(null);
		
		quit = new Button("中断");
		quit.setVisible(false);
		display.add(quit);
		quit.setBounds(540, 30, 80, 24);
		quit.addActionListener(this);
		
		// 以下、 added 02/9/16
		dd = new Button("ダブルダミー");
		dd.setVisible(false);
		display.add(dd);
		dd.setBounds(540, 58, 80, 24);
		dd.addActionListener(this);
		// 以上、// added 02/9/16
		
		display.add(canvas);
		
		if (display instanceof Frame) {
			Frame f = (Frame)display;
			f.pack();
			f.show();
		}
		canvas.requestFocus();
		
		try {
			System.gc();
		} catch (Throwable t) {
			System.out.println("System.gc() is not allowed:"+t);
		}
	}
	
	/**
	 * Board の初期化を行います。
	 */
	public void start() {
		dialog = new SelectDialog(display, board);
		for (int i = 0; i < problem.size(); i++) {
			Problem prob = (Problem)(problem.elementAt(i));
			dialog.addChoice(prob.getTitle());
		}
		field.repaint();
		try {
			dialog.newHand.select(handno);
		} catch (Exception e) {
			handno = -1;
		}
		dialog.show();
		dialog.requestFocus();	// added 2000/8/16
		String result = dialog.result; // dialog.dispose() によって result が失われるため
		dialog.disposeDialog();	// ここで行う added 2001/7/15
		if (result == null) return;
		if (result.equals("disposed")) {
			exitSignal = true;
			return;
		}
		
		mainThread = Thread.currentThread();
		// 以下、added 02/9/16
		doubleDummy = false;
		dd.setLabel("ダブルダミー");
		// 以上、added 02/9/16
		if ("Video".equals(result)) {
			makeVideohand();
			GuiedPacket east = (GuiedPacket)(board.getHand(Board.EAST));
			east.turn(true);
			GuiedPacket west = (GuiedPacket)(board.getHand(Board.WEST));
			west.turn(true);
			
			doubleDummy = true;	// added 02/9/16
			dd.setLabel("通常に戻す");	// added 02/9/16
			
		} else if ("Same Hand".equals(result)) {
			makeLasthand();
		} else {
			this.handno = -1;
			for (int i = 0; i < problem.size(); i++) {
				Problem p = (Problem)(problem.elementAt(i));
				
				if (p.getTitle().equals(result)) {
					this.handno = i;
					makeNewhand();
					break;
				}
			}
			if (this.handno == -1) { return; }
		}
		main();
	}
	
	/**
	 * ダイアログで新しいハンドを選択したときの処理です。
	 */
	protected void makeNewhand() {
		Problem prob = (Problem)(problem.elementAt(handno));
		prob.start();
		
		board = new GuiedBoard(new BoardImpl(1));
		board.setName(prob.getTitle());
		
		field.addEntity(board);
		board.setPosition(0, 0);
		board.setDirection(0);
		
		//
		// Player 設定
		//
		player = new Player[4];
		player[Board.NORTH] = new RandomPlayer(board, Board.NORTH);
		player[Board.SOUTH] = new HumanPlayer(board, field, Board.SOUTH);
		
		//
		// Computer Player 設定
		//
		if ((prob.getThinker() == null)||(!prob.getThinker().equals("DoubleDummyPlayer"))) {
			player[Board.EAST ] = new SimplePlayer2(board, Board.EAST);
			player[Board.WEST ] = new SimplePlayer2(board, Board.WEST, prob.getOpeningLead());
		} else if (prob.getThinker().equals("DoubleDummyPlayer")) {
			player[Board.EAST ] = new ReadAheadPlayer(board, Board.EAST);
			player[Board.WEST ] = new ReadAheadPlayer(board, Board.WEST, prob.getOpeningLead());
		} else {
			player[Board.EAST ] = new NoRufPlayer(board, Board.EAST);
			player[Board.WEST ] = new NoRufPlayer(board, Board.WEST, prob.getOpeningLead());
		}
		
		//
		// ディール
		//
		Packet[] hand = prob.getHand();
		
		board.deal(hand);
		field.repaint();
		
		//
		// ビッドを行う
		//
		board.setContract(prob.getContract(), Board.SOUTH);
	}
	
	private void makeVideohand() {
		Board oldBoard = board;
		board = new GuiedBoard(new BoardImpl(1));
		board.setName(oldBoard.getName());
		
		field.addEntity(board);
		board.setPosition(0, 0);
		board.setDirection(0);
		
		//
		// Player 設定
		//
		player = new Player[4];
		player[Board.NORTH] = new VideoPlayer(board, oldBoard, Board.NORTH);
		player[Board.EAST ] = new VideoPlayer(board, oldBoard, Board.EAST );
		player[Board.SOUTH] = new VideoPlayer(board, oldBoard, Board.SOUTH);
		player[Board.WEST ] = new VideoPlayer(board, oldBoard, Board.WEST );
		
		//
		// ディール
		//
		Packet[] hand = calculateOriginalHand(oldBoard);
		
		board.deal(hand);
		field.repaint();
		
		//
		// ビッドを行う
		//
		board.setContract(oldBoard.getContract(), oldBoard.getDeclarer());
	}
	
	private void makeLasthand() {
		Problem prob = (Problem)(problem.elementAt(handno));
		Board oldBoard = board;
		board = new GuiedBoard(new BoardImpl(1));
		board.setName(oldBoard.getName());
		
		field.addEntity(board);
		board.setPosition(0, 0);
		board.setDirection(0);
		
		//
		// Player 設定
		//
		player = new Player[4];
		player[Board.NORTH] = new RandomPlayer(board, Board.NORTH);
		player[Board.SOUTH] = new HumanPlayer(board, field, Board.SOUTH);
		
		//
		// Computer Player 設定
		//
		if ((prob.getThinker() == null)||(!prob.getThinker().equals("DoubleDummyPlayer"))) {
			player[Board.EAST ] = new SimplePlayer2(board, Board.EAST);
			player[Board.WEST ] = new SimplePlayer2(board, Board.WEST, prob.getOpeningLead());
		} else if (prob.getThinker().equals("DoubleDummyPlayer")) {
			player[Board.EAST ] = new ReadAheadPlayer(board, Board.EAST);
			player[Board.WEST ] = new ReadAheadPlayer(board, Board.WEST, prob.getOpeningLead());
		} else {
			player[Board.EAST ] = new NoRufPlayer(board, Board.EAST);
			player[Board.WEST ] = new NoRufPlayer(board, Board.WEST, prob.getOpeningLead());
		}
//		player[Board.NORTH] = new RandomPlayer(board, Board.NORTH);
//		player[Board.EAST ] = new ReadAheadPlayer(board, Board.EAST);
//		player[Board.SOUTH] = new HumanPlayer(board, field, Board.SOUTH);
//		player[Board.WEST ] = new ReadAheadPlayer(board, Board.WEST, prob.getOpeningLead());
		
		//
		// ディール
		//
		Packet[] hand = calculateOriginalHand(oldBoard);
		
		board.deal(hand);
		field.repaint();
		
		//
		// ビッドを行う
		//
		board.setContract(oldBoard.getContract(), oldBoard.getDeclarer());
	}
	
	/**
	 * start()と対になるメソッドで、start()で初期化したリソースの破棄を行います。
	 * start() と別のスレッドから呼ばれます。
	 * ダイアログのリソースなど終了処理が必要なものの破棄を行います。
	 * 上位から明示的にコールすることによってダイアログが残るバグは解消されます。
	 */
	public void stop() {
		if (field != null) {
			field.removeEntity(board);
//			field.dispose();
		}
		if (dialog != null) dialog.disposeDialog();
		if (confirmDialog != null) confirmDialog.disposeDialog();
		if (player != null) {
			for (int i = 0; i < player.length; i++) {
				if ((player[i] != null)&&(player[i] instanceof HumanPlayer)) {
					((HumanPlayer)player[i]).dispose();
				}
			}
		}
	}
	
	public void dispose() {
		if (field != null) field.dispose();
	}
	
	/**
	 * 与えられたボードにおけるはじめのハンドを計算します。
	 */
	protected Packet[] calculateOriginalHand(Board board) {
		return BridgeUtils.calculateOriginalHand(board);
	}
	
	/**
	 * クリックされるのを待ちます。
	 */
	protected void waitClick() throws InterruptedException {
		synchronized (this) {
			Canvas canvas = field.getCanvas();
			canvas.addMouseListener(this);
			try {
				wait();
				canvas.removeMouseListener(this);
			} catch (InterruptedException e) {
				canvas.removeMouseListener(this);
				throw new InterruptedException();
			}
		}
	}
	
	/**
	 * 始めのすみれによる説明を表示する
	 */
	protected void explain() throws InterruptedBridgeException {
		
		Problem prob = (Problem)(problem.elementAt(handno));
		
		sumire = new Explanation(field, prob.getDescription());
		contractString = prob.getContractString();
		
		field.addEntity(sumire);
		field.repaint();
		try {
			waitClick(); // クリックを待つ。 InterruptedException をスローするかも
		} catch (InterruptedException e) {
			if (confirmQuit()) {
				field.removeEntity(sumire);
				throw new InterruptedBridgeException();
			}
		}
		field.removeEntity(sumire); // これによってすみれのスレッドも終了する
		field.repaint();
	}
	
	/**
	 * メインループ
	 */
	protected void mainLoop() throws InterruptedBridgeException {
		// 以下，added 02/9/16
		if (doubleDummy) {
			board.getHand(Board.EAST).turn(true);
			board.getHand(Board.WEST).turn(true);
		}
		// 以上、added 02/9/16
		
		while (true) {
			//
			// Spot を指定する
			//
			field.setSpot(board.getTurn());
			field.repaint();
			
			Object c = null;
			while (c == null) {
				try {
					c = player[board.getPlayer()].play(); // ブロックする
				} catch (InterruptedException e) {
					if (confirmQuit()) throw new InterruptedBridgeException();
				}
			}
			board.play(c);
			field.repaint();
			
			if (board.getStatus() == Board.SCORING) break;
		}
	}
	
	/**
	 * 元のハンドの表示、スコアの表示を行う
	 */
	protected void displayScore() throws InterruptedBridgeException {
		field.removeSpot();
		field.repaint();
		
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			if (confirmQuit()) throw new InterruptedBridgeException();
		}
		//
		// カードをもう一度表示する
		//
		Packet[] original = calculateOriginalHand(board);
		for (int i = 0; i < 4; i++) {
			GuiedPacket hand = (GuiedPacket)(board.getHand(i));
			for (int j = 0; j < original[i].size(); j++) {
				Card c = original[i].peek(j);
				c.turn(true);
				hand.add(c);
			}
		}

		board.layout();
		for (int i = 0; i < 4; i++) {
			GuiedPacket hand = (GuiedPacket)(board.getHand(i));
			hand.arrange();
			hand.layout();
		}
		
		//
		// スコア表示
		//
//		Score score = new Score();
		String msg = "結果：" + contractString + "  ";
		String msg2;
		// メイク数
		int win		= countWinners(board);
		int up		= win - board.getContract().getLevel() - 6;
		int make	= win - 6;
		
		if (up >= 0) {
			// メイク
			msg += String.valueOf(make) + "メイク";
			msg2 = "おめでとう！！";
		} else {
			// ダウン
			msg += String.valueOf(-up) + "ダウン";
			msg2 = "残念。もう一度がんばって！";
		}
		
		msg += "("+win+"トリック)\nN-S側のスコア："+Score.calculate(board, Board.SOUTH);
		msg += "\n \n" + msg2;
		
		sumire = new Explanation(field, msg);
		if (up >= 0) 
			sumire.animate(Explanation.DELIGHTED);
		else
			sumire.animate(Explanation.SAD);
		field.addEntity(sumire);
		field.repaint();
		try {
			waitClick();
		} catch (InterruptedException e) {
			if (confirmQuit()) {
				field.removeEntity(sumire);
				clearHands();
				throw new InterruptedBridgeException();
			}
		}
		field.removeEntity(sumire);
		field.repaint();
		clearHands();
	}
	
	protected void clearHands() {
		//
		// Board の状態を正しいものにするため、ハンドをクリアする
		//
		for (int i = 0; i < 4; i++) {
			Packet hand = board.getHand(i);
			while (hand.size() > 0) {
				hand.draw();
			}
		}
	}
	
	protected boolean confirmQuit() {
		try {
			confirmDialog = new YesNoDialog(
								field.getCanvas(),
								"このボードを破棄して中断しますか？");
			confirmDialog.show();
			boolean yes = confirmDialog.isYes();
			confirmDialog.disposeDialog();
			return yes;
		} catch (Exception e) {
//			e.printStackTrace();
			return true;
		}
	}
	
	/**
	 * メインメソッドです。
	 */
	public void main() {
		if (Thread.interrupted()); // interruptステータスクリア
		quit.setVisible(true);
		dd.setVisible(true);	// added 02/9/16
		try {
			explain();
			mainLoop();
			displayScore();
		} catch (InterruptedBridgeException e) {
			field.removeSpot();
			field.repaint();
		}
		quit.setVisible(false);
		dd.setVisible(false);	// added 02/9/16
	}
	
	/**
	 * VM から一度だけしか呼ばれないことが保証されているため、このメソッドを
	 * プログラムから呼び出すことはしないこととする。
	 */
	protected void finalize() throws Throwable {
		super.finalize();
		stop();
	}
	
	// IEのJavaVM 4.0 対応
	private static int countWinners(Board board) {
		Trick[]	tr			= board.getAllTricks();
		if (tr == null) return 0;
		
		int		win			= 0;
		int		declarer	= board.getDeclarer();
		
		// winner を数える(Board にあったほうが便利)
		for (int i = 0; i < tr.length; i++) {
			int winner = tr[i].getWinner();
			if ( ((winner ^ declarer) & 1) == 0 ) win++;
		}
		
		return win;
	}

}
